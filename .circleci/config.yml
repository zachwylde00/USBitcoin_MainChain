# Use the latest 2.1 version of CircleCI pipeline process engine. 
# See: https://circleci.com/docs/2.0/configuration-reference
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:  
    name:
    command: .ci/fetch_define_a_Docker_executor_WGET:'https://circleci.com/docs/2.0/executor-types/'
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the tag on this image to a more stable version, using latest can result in unstable builds.
    docker:
      - image: microsoft/dotnet:latest
    steps:
      # Checkout the code as the first step.
      - checkout
      # Then simply use the dotnet container as you'd expect and run your tests
      - run:
          # Update this line with the directory that contains your tests project file
          working_directory: ~/USBitcoin.MainChain/App.Tests
          name: Run tests and install
          command: |
            dotnet test
Jobs:
      build:
      Steps:
      run:
      - name: Install Chocolaty
      - command: choco install circleci-cli -y 


      



  

    Jobs:

     build:
     working_directory: USBitcoin.MainChain-master/tmp
     Steps:
     run:
      - name: Creating Artifacts
      - command: |
          echo "my artifact file" > /tmp/art-1;
          mkdir /tmp/artifacts;echo "my artifact files in a dir" > /tmp/artifacts/art-2;

      - store_artifacts:
        path: USBitcoin.MainChain/tmp/art-1
        destination: artifact-file

      - store_artifacts:
        path: /tmp/artifacts          

workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  sample: 
    jobs:
      - build-and-test
